const express = require("express");
const Order = require("../models/Order");
const Product = require("../models/Product");
const Discount = require("../models/Discount");
const User = require("../models/User");
const sendOrderEmail = require("../utils/email");
const { sendMessage } = require("../utils/telegramBot");
const crypto = require("crypto");
const router = express.Router();

// H√†m t·∫°o token ng·∫´u nhi√™n
const generateToken = () => {
  return crypto.randomBytes(16).toString("hex");
};

// Route th√™m ƒë∆°n h√†ng
router.post("/add-order", async (req, res) => {
  try {
    let orders = req.body;
    if (!Array.isArray(orders) || orders.length === 0) {
      return res
        .status(400)
        .json({ message: "Danh s√°ch ƒë∆°n h√†ng tr·ªëng ho·∫∑c kh√¥ng h·ª£p l·ªá" });
    }

    const telegramConnectionInfo = [];
    const newOrders = [];

    for (const order of orders) {
      let subtotal = 0;
      let productDetails = [];

      for (const item of order.products) {
        const product = await Product.findById(item.product_id);
        if (!product)
          return res
            .status(404)
            .json({ message: `S·∫£n ph·∫©m ${item.product_id} kh√¥ng t·ªìn t·∫°i` });

        if (product.stock_quantity < item.quantity) {
          return res
            .status(400)
            .json({
              message: `S·∫£n ph·∫©m ${product.product_name} ch·ªâ c√≤n ${product.stock_quantity} trong kho`,
            });
        }

        const productTotal = product.price * item.quantity;
        subtotal += productTotal;

        productDetails.push({
          product_id: product._id,
          product_name: product.product_name,
          image_url: product.image_url,
          quantity: item.quantity,
          price_per_unit: product.price,
          total_price: productTotal,
        });

        product.stock_quantity -= item.quantity;
        await product.save();
      }

      let discountAmount = 0;
      if (order.discount_code) {
        const discount = await Discount.findOne({ code: order.discount_code });
        if (
          discount &&
          discount.status === "active" &&
          subtotal >= discount.min_order_value
        ) {
          discountAmount =
            discount.discount_type === "percentage"
              ? (subtotal * discount.discount_value) / 100
              : discount.discount_value;
        }
      }

      const VAT = (subtotal - discountAmount) * 0.1;
      const shippingFee = order.shipping_fee ?? 50000;
      const totalAmount = subtotal - discountAmount + VAT + shippingFee;

      const newOrder = new Order({
        user_id: order.user_id,
        products: productDetails,
        subtotal,
        discount_code: order.discount_code || "",
        discount_amount: discountAmount,
        VAT,
        shipping_fee: shippingFee,
        total_amount: totalAmount,
        fullName: order.fullName,
        phone: order.phone,
        email: order.email,
        payment_method: order.payment_method || "COD",
        payment_status: order.payment_status || "Unpaid",
        order_status: order.order_status || "Pending",
        note: order.note || "",
        deliveryDate: order.deliveryDate || "",
        deliveryTime: order.deliveryTime || "",
        shipping_address: order.shipping_address,
      });

      await newOrder.save();
      newOrders.push(newOrder);

      // G·ª≠i email x√°c nh·∫≠n ƒë∆°n h√†ng
      await sendOrderEmail({
        fullName: order.fullName,
        email: order.email,
        orderId: newOrder._id,
        totalAmount,
        shippingAddress: `${order.shipping_address.street}, ${order.shipping_address.ward}, ${order.shipping_address.city}, ${order.shipping_address.province}`,
        products: productDetails,
      });
    }

    res
      .status(201)
      .json({
        message: `Th√™m th√†nh c√¥ng ${newOrders.length} ƒë∆°n h√†ng`,
        orders: newOrders,
      });
  } catch (err) {
    console.error("L·ªói:", err);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß khi th√™m ƒë∆°n h√†ng" });
  }
});

// // Route th√™m ƒë∆°n h√†ng
// router.post("/add-order", async (req, res) => {
//   try {
//     let orders = req.body;
//     if (!Array.isArray(orders) || orders.length === 0) {
//       return res.status(400).json({ message: "Danh s√°ch ƒë∆°n h√†ng tr·ªëng ho·∫∑c kh√¥ng h·ª£p l·ªá" });
//     }

//     const telegramConnectionInfo = [];
//     const newOrders = [];

//     for (const order of orders) {
//       let subtotal = 0;
//       let productDetails = [];

//       for (const item of order.products) {
//         const product = await Product.findById(item.product_id);
//         if (!product)
//           return res
//             .status(404)
//             .json({ message: `S·∫£n ph·∫©m ${item.product_id} kh√¥ng t·ªìn t·∫°i` });

//         if (product.stock_quantity < item.quantity) {
//           return res.status(400).json({
//             message: `S·∫£n ph·∫©m ${product.product_name} ch·ªâ c√≤n ${product.stock_quantity} trong kho`,
//           });
//         }

//         const productTotal = product.price * item.quantity;
//         subtotal += productTotal;

//         productDetails.push({
//           product_id: product._id,
//           product_name: product.product_name,
//           image_url: product.image_url,
//           quantity: item.quantity,
//           price_per_unit: product.price,
//           total_price: productTotal,
//         });

//         product.stock_quantity -= item.quantity;
//         await product.save();
//       }

//       let discountAmount = 0;
//       if (order.discount_code) {
//         const discount = await Discount.findOne({ code: order.discount_code });
//         if (
//           discount &&
//           discount.status === "active" &&
//           subtotal >= discount.min_order_value
//         ) {
//           discountAmount =
//             discount.discount_type === "percentage"
//               ? (subtotal * discount.discount_value) / 100
//               : discount.discount_value;
//         }
//       }

//       const VAT = (subtotal - discountAmount) * 0.1;
//       const shippingFee = order.shipping_fee ?? 50000;
//       const totalAmount = subtotal - discountAmount + VAT + shippingFee;

//       const newOrder = new Order({
//         user_id: order.user_id,
//         products: productDetails,
//         subtotal,
//         discount_code: order.discount_code || "",
//         discount_amount: discountAmount,
//         VAT,
//         shipping_fee: shippingFee,
//         total_amount: totalAmount,
//         fullName: order.fullName,
//         phone: order.phone,
//         email: order.email,
//         payment_method: order.payment_method || "COD",
//         payment_status: order.payment_status || "Unpaid",
//         order_status: order.order_status || "Pending",
//         note: order.note || "",
//         deliveryDate: order.deliveryDate || "",
//         deliveryTime: order.deliveryTime || "",
//         shipping_address: order.shipping_address,
//       });

//       await newOrder.save();
//       newOrders.push(newOrder);

//       // G·ª≠i email x√°c nh·∫≠n ƒë∆°n h√†ng
//       await sendOrderEmail({
//         fullName: order.fullName,
//         email: order.email,
//         orderId: newOrder._id,
//         totalAmount,
//         shippingAddress: `${order.shipping_address.street}, ${order.shipping_address.ward}, ${order.shipping_address.city}, ${order.shipping_address.province}`,
//         products: productDetails,
//       });

//       // L·∫•y th√¥ng tin user ƒë·ªÉ ki·ªÉm tra k·∫øt n·ªëi Telegram
//       const user = await User.findById(order.user_id);

//       if (!user) {
//         console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y user v·ªõi ID: ${order.user_id}`);
//         continue;
//       }

//       // G·ªôp ki·ªÉm tra v√† t·∫°o token n·∫øu c·∫ßn
//       if (!user.telegramChatId || !user.telegramConnectToken) {
//         if (!user.telegramConnectToken) {
//           user.telegramConnectToken = generateToken();
//           await user.save();
//           console.log(
//             `‚úÖ G√°n token Telegram cho user ${user._id}: ${user.telegramConnectToken}`
//           );
//         }
//       }

//       // N·∫øu user ch∆∞a k·∫øt n·ªëi Telegram (chatId null) ‚Üí ƒë·∫©y v√†o frontend
//       if (!user.telegramChatId && user.telegramConnectToken) {
//         telegramConnectionInfo.push({
//           userId: user._id,
//           connectionLink: `https://t.me/Auchobot_bot?start=${user.telegramConnectToken}`,
//         });

//         console.log(
//           `üßë User ${user._id} ch∆∞a k·∫øt n·ªëi Telegram ‚Üí Link: https://t.me/Auchobot_bot?start=${user.telegramConnectToken}`
//         );
//       } else {
//         console.log(
//           `‚úÖ User ${user._id} ƒë√£ k·∫øt n·ªëi Telegram (chatId: ${user.telegramChatId})`
//         );
//       }
//     }

//     console.log("üì¶ T·ªïng s·ªë ƒë∆°n:", newOrders.length);
//     console.log("üîó ƒêang x·ª≠ l√Ω k·∫øt n·ªëi Telegram...");
//     for (const order of newOrders) {
//       if (!order.user_id) {
//         console.warn("‚ö†Ô∏è ƒê∆°n kh√¥ng c√≥ user_id, b·ªè qua Telegram.");
//         // T√¨m token trong order.note v·ªõi ƒë·ªãnh d·∫°ng: guestToken=abc123
//         const guestTokenMatch = order.note?.match(/guestToken=([a-zA-Z0-9]+)/);
//         const guestToken = guestTokenMatch ? guestTokenMatch[1] : null;

//         if (guestToken) {
//           const guestUser = await User.findOne({
//             telegramConnectToken: guestToken,
//           });

//           if (guestUser?.telegramChatId) {
//             // G·ª≠i th√¥ng b√°o ƒë∆°n h√†ng
//             const message =
//               `üì¶ *ƒê∆°n h√†ng m·ªõi ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t th√†nh c√¥ng!*\n\n` +
//               `üßæ M√£ ƒë∆°n: ${order._id}\n` +
//               `üë§ T√™n: ${order.fullName}\n` +
//               `üíµ T·ªïng ti·ªÅn: ${order.total_amount.toLocaleString()} ƒë\n` +
//               `üìÖ Ng√†y giao: ${order.deliveryDate || "Ch∆∞a x√°c ƒë·ªãnh"}\n\n` +
//               `üõçÔ∏è S·∫£n ph·∫©m:\n` +
//               order.products
//                 .map((p) => `- ${p.product_name} x${p.quantity}`)
//                 .join("\n") +
//               `\n\nüöö ƒê·ªãa ch·ªâ: ${order.shipping_address?.street || ""}, ${
//                 order.shipping_address?.ward || ""
//               }, ${order.shipping_address?.city || ""}, ${
//                 order.shipping_address?.province || ""
//               }`;

//             await sendMessage(guestUser.telegramChatId, message);
//             console.log(
//               `‚úÖ ƒê√£ g·ª≠i ƒë∆°n h√†ng cho kh√°ch guestToken=${guestToken} (chatId: ${guestUser.telegramChatId})`
//             );
//           } else {
//             console.warn(
//               `‚ùå Kh√¥ng t√¨m th·∫•y chatId cho guestToken=${guestToken}`
//             );
//           }
//         } else {
//           console.warn("‚ö†Ô∏è Kh√¥ng c√≥ guestToken trong order.note");
//         }
//         continue;
//       }

//       const user = await User.findById(order.user_id);

//       if (!user) {
//         console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y user v·ªõi ID: ${order.user_id}`);
//         continue;
//       }

//       // N·∫øu ch∆∞a k·∫øt n·ªëi Telegram, v√† ch∆∞a c√≥ token th√¨ t·∫°o
//       if (!user.telegramChatId) {
//         if (!user.telegramConnectToken) {
//           user.telegramConnectToken = generateToken();
//           await user.save();
//           console.log(
//             `‚úÖ T·∫°o token Telegram cho user ${user._id}: ${user.telegramConnectToken}`
//           );
//         }

//         telegramConnectionInfo.push({
//           userId: user._id,
//           connectionLink: `https://t.me/Auchobot_bot?start=${user.telegramConnectToken}`,
//         });

//         console.log(
//           `üßë User ${user._id} ch∆∞a k·∫øt n·ªëi Telegram ‚Üí Link: https://t.me/Auchobot_bot?start=${user.telegramConnectToken}`
//         );
//       } else {
//         console.log(
//           `‚úÖ User ${user._id} ƒë√£ k·∫øt n·ªëi Telegram (chatId: ${user.telegramChatId})`
//         );
//       }
//     }
//     console.log("‚úÖ G·ª≠i response v·ªÅ frontend");
//     console.log("üì§ telegramConnectionInfo g·ª≠i v·ªÅ:", telegramConnectionInfo);
//     res.status(201).json({
//       message: `Th√™m th√†nh c√¥ng ${newOrders.length} ƒë∆°n h√†ng`,
//       orders: newOrders,
//       telegramConnectionInfo,
//     });
//   } catch (err) {
//     console.error("L·ªói:", err);
//     res.status(500).json({ message: "L·ªói m√°y ch·ªß khi th√™m ƒë∆°n h√†ng" });
//   }
// });

// Route l·∫•y danh s√°ch ƒë∆°n h√†ng
router.get("/get-orders", async (req, res) => {
  try {
    // T√¨m t·∫•t c·∫£ ƒë∆°n h√†ng ch∆∞a b·ªã xo√°
    const orders = await Order.find({ deleted: { $ne: true } }) // L·ªçc nh·ªØng ƒë∆°n h√†ng ch∆∞a b·ªã x√≥a
      .populate("user_id", "name") // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
      .populate("build_id") // L·∫•y th√¥ng tin build n·∫øu c·∫ßn
      .exec();

    // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ ƒë∆°n h√†ng n√†o
    if (orders.length === 0) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng n√†o" });
    }

    // Tr·∫£ v·ªÅ danh s√°ch ƒë∆°n h√†ng
    res.status(200).json(orders);
  } catch (err) {
    console.error("L·ªói:", err);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß khi l·∫•y ƒë∆°n h√†ng" });
  }
});

// Route l·∫•y danh s√°ch ƒë∆°n h√†ng ƒë√£ b·ªã xo√°
router.get("/get-deleted-orders", async (req, res) => {
  try {
    // T√¨m t·∫•t c·∫£ ƒë∆°n h√†ng c√≥ deleted = true
    const deletedOrders = await Order.find({ deleted: true })
      .populate("user_id", "name") // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
      .populate("build_id") // L·∫•y th√¥ng tin build n·∫øu c·∫ßn
      .exec();

    // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ ƒë∆°n h√†ng n√†o
    if (deletedOrders.length === 0) {
      return res
        .status(404)
        .json({ message: "Kh√¥ng c√≥ ƒë∆°n h√†ng ƒë√£ b·ªã xo√° n√†o" });
    }

    // Tr·∫£ v·ªÅ danh s√°ch ƒë∆°n h√†ng ƒë√£ xo√°
    res.status(200).json(deletedOrders);
  } catch (err) {
    console.error("L·ªói:", err);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß khi l·∫•y ƒë∆°n h√†ng ƒë√£ xo√°" });
  }
});

// Route l·∫•y th√¥ng tin ƒë∆°n h√†ng
router.post("/get-orderinfos", async (req, res) => {
  try {
    const { id } = req.body;

    if (!id) {
      return res.status(400).json({ message: "Vui l√≤ng cung c·∫•p ID ƒë∆°n h√†ng" });
    }

    // T√¨m ƒë∆°n h√†ng theo ID v√† populate th√¥ng tin ng∆∞·ªùi d√πng
    const order = await Order.findById(id)
      .populate("user_id", "name email") // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
      .exec();

    if (!order) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" });
    }

    res.status(200).json(order);
  } catch (err) {
    console.error("L·ªói:", err);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß khi l·∫•y th√¥ng tin ƒë∆°n h√†ng" });
  }
});

// Route x√≥a m·ªÅm ƒë∆°n h√†ng (c√≥ th·ªÉ x√≥a m·ªôt ho·∫∑c nhi·ªÅu ƒë∆°n h√†ng)
router.delete("/delete-orders", async (req, res) => {
  const { ids } = req.body;

  // Ki·ªÉm tra xem m·∫£ng IDs c√≥ h·ª£p l·ªá kh√¥ng
  if (!Array.isArray(ids) || ids.length === 0) {
    return res.status(400).json({ message: "M·∫£ng ID ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá" });
  }

  try {
    // C·∫≠p nh·∫≠t tr∆∞·ªùng deleted = true cho c√°c ƒë∆°n h√†ng c√≥ ID trong danh s√°ch
    const result = await Order.updateMany(
      { _id: { $in: ids } },
      { $set: { deleted: true } }
    );

    // N·∫øu kh√¥ng c√≥ ƒë∆°n h√†ng n√†o ƒë∆∞·ª£c c·∫≠p nh·∫≠t
    if (result.modifiedCount === 0) {
      return res
        .status(404)
        .json({ message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng n√†o ƒë·ªÉ x√≥a" });
    }

    // Tr·∫£ v·ªÅ th√¥ng b√°o th√†nh c√¥ng
    res.status(200).json({
      message: `${result.modifiedCount} ƒë∆°n h√†ng ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u l√† ƒë√£ xo√°`,
    });
  } catch (err) {
    console.error("L·ªói:", err);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß khi xo√° ƒë∆°n h√†ng" });
  }
});

// Route kh√¥i ph·ª•c ƒë∆°n h√†ng ƒë√£ xo√° (c√≥ th·ªÉ kh√¥i ph·ª•c m·ªôt ho·∫∑c nhi·ªÅu ƒë∆°n h√†ng)
router.patch("/restore-orders", async (req, res) => {
  const { ids } = req.body;

  // Ki·ªÉm tra xem m·∫£ng IDs c√≥ h·ª£p l·ªá kh√¥ng
  if (!Array.isArray(ids) || ids.length === 0) {
    return res.status(400).json({ message: "M·∫£ng ID ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá" });
  }

  try {
    // C·∫≠p nh·∫≠t l·∫°i deleted = false cho c√°c ƒë∆°n h√†ng c√≥ ID trong danh s√°ch
    const result = await Order.updateMany(
      { _id: { $in: ids }, deleted: true },
      { $set: { deleted: false } }
    );

    // N·∫øu kh√¥ng c√≥ ƒë∆°n h√†ng n√†o ƒë∆∞·ª£c c·∫≠p nh·∫≠t
    if (result.modifiedCount === 0) {
      return res
        .status(404)
        .json({ message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng n√†o ƒë·ªÉ kh√¥i ph·ª•c" });
    }

    // Tr·∫£ v·ªÅ th√¥ng b√°o th√†nh c√¥ng
    res.status(200).json({
      message: `${result.modifiedCount} ƒë∆°n h√†ng ƒë√£ ƒë∆∞·ª£c kh√¥i ph·ª•c`,
    });
  } catch (err) {
    console.error("L·ªói:", err);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß khi kh√¥i ph·ª•c ƒë∆°n h√†ng" });
  }
});

// Route c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
router.put("/update-order-status/:orderId", async (req, res) => {
  try {
    const { order_status } = req.body;
    const { orderId } = req.params;

    // Ki·ªÉm tra tr·∫°ng th√°i h·ª£p l·ªá
    const validStatuses = [
      "Pending",
      "Confirmed",
      "Processing",
      "Shipped",
      "OutForDelivery",
      "Delivered",
      "Cancelled",
      "Returned",
      "Refunded",
      "Failed",
    ];
    if (!validStatuses.includes(order_status)) {
      return res
        .status(400)
        .json({ message: "Tr·∫°ng th√°i ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá" });
    }

    // C·∫≠p nh·∫≠t ƒë∆°n h√†ng
    const updatedOrder = await Order.findByIdAndUpdate(
      orderId,
      { order_status, updated_at: Date.now() },
      { new: true }
    );

    if (!updatedOrder) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" });
    }

    res.status(200).json({ message: "C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng" });
  } catch (err) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng:", err);
    res
      .status(500)
      .json({ message: "L·ªói m√°y ch·ªß khi c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng" });
  }
});

module.exports = router;
